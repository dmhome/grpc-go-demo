// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package pbproto is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	UserRequest
	UserResponse
*/
package pbproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message 对应生成代码的 struct
// 定义客户端请求的数据格式
type UserRequest struct {
	// [修饰符] 类型 字段名 = 标识符;
	Uid int32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 定义服务端响应的数据格式
type UserResponse struct {
	Id    int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age   int32    `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Title []string `protobuf:"bytes,4,rep,name=title" json:"title,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserResponse) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserResponse) GetTitle() []string {
	if m != nil {
		return m.Title
	}
	return nil
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "pbproto.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "pbproto.UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserInfoService service

type UserInfoServiceClient interface {
	// 微服务中获取用户信息的 RPC 函数
	// stream 关键字表示此函数将响应数据流
	GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserInfoService_GetUserInfoClient, error)
}

type userInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserInfoServiceClient(cc *grpc.ClientConn) UserInfoServiceClient {
	return &userInfoServiceClient{cc}
}

func (c *userInfoServiceClient) GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserInfoService_GetUserInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserInfoService_serviceDesc.Streams[0], c.cc, "/pbproto.UserInfoService/GetUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &userInfoServiceGetUserInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserInfoService_GetUserInfoClient interface {
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userInfoServiceGetUserInfoClient struct {
	grpc.ClientStream
}

func (x *userInfoServiceGetUserInfoClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserInfoService service

type UserInfoServiceServer interface {
	// 微服务中获取用户信息的 RPC 函数
	// stream 关键字表示此函数将响应数据流
	GetUserInfo(*UserRequest, UserInfoService_GetUserInfoServer) error
}

func RegisterUserInfoServiceServer(s *grpc.Server, srv UserInfoServiceServer) {
	s.RegisterService(&_UserInfoService_serviceDesc, srv)
}

func _UserInfoService_GetUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserInfoServiceServer).GetUserInfo(m, &userInfoServiceGetUserInfoServer{stream})
}

type UserInfoService_GetUserInfoServer interface {
	Send(*UserResponse) error
	grpc.ServerStream
}

type userInfoServiceGetUserInfoServer struct {
	grpc.ServerStream
}

func (x *userInfoServiceGetUserInfoServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _UserInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbproto.UserInfoService",
	HandlerType: (*UserInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserInfo",
			Handler:       _UserInfoService_GetUserInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0x02, 0x33, 0x94, 0xe4, 0xb9, 0xb8,
	0x43, 0x8b, 0x53, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x4b,
	0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0xa5, 0x28, 0x2e, 0x1e, 0x88,
	0x82, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x3e, 0x2e, 0x26, 0xb8, 0x02, 0xa6, 0xcc, 0x14,
	0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30,
	0x1b, 0x64, 0x4a, 0x62, 0x7a, 0xaa, 0x04, 0x33, 0xc4, 0x94, 0xc4, 0xf4, 0x54, 0x21, 0x11, 0x2e,
	0xd6, 0x92, 0xcc, 0x92, 0x9c, 0x54, 0x09, 0x16, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x08, 0xc7, 0xc8,
	0x9f, 0x8b, 0x1f, 0x64, 0xb6, 0x67, 0x5e, 0x5a, 0x7e, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa,
	0x90, 0x0d, 0x17, 0xb7, 0x7b, 0x6a, 0x09, 0x4c, 0x54, 0x48, 0x44, 0x0f, 0xea, 0x50, 0x3d, 0x24,
	0x57, 0x4a, 0x89, 0xa2, 0x89, 0x42, 0x9c, 0x66, 0xc0, 0x98, 0xc4, 0x06, 0x16, 0x35, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x69, 0x03, 0xc4, 0xbf, 0xeb, 0x00, 0x00, 0x00,
}
